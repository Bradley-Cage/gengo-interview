/*
 * test.java
 * 
 * Copyright 2014 Bradley Cage <cage.bradley@berkeley.edu>
 * 
 */
import java.util.*;
import java.lang.*;
import org.apache.commons.lang.*;

public class test {
	
	public static int getIntegerComplement(int decimal)
	{
		if (decimal > 100000)
		{
			System.out.println("Invalid number, number too large");
			return 0;
		}
		String s = Integer.toString(decimal,2);
		char[] c = s.toCharArray();
		for(int i = 0; i<c.length;i++)
		{
			c[i]=(c[i] == '1')?'0':'1';
		}
		String n = new String(c);
		int out = Integer.parseInt(n,2);
		return out;
	}
	public static int numberOnes(int number)
	{
		String nums = "";
		for (int i = 0; i<number;i++)
		{
			nums += String.valueOf(i);
		}
		char[] listNums = nums.toCharArray();
		Arrays.sort(listNums);
		int numOnes = StringUtils.countMatches(new String(listNums),"1");
		return numOnes;
	}
	private static String expand(String sub,int l,int r)
	{
		int len = sub.length();
		while (l>=0 && r<=len-1 && sub.charAt(l)==sub.charAt(r))
		{
			r++;
			l--;
		}
		return sub.substring(l+1,r);
	}
	public static String longPalindrome(String pal)
	{
		String s = pal.toLowerCase();
		s.replaceAll("\\W","");
		int len = s.length(); 
		if (len==0) return "No palindrome exists if there is no input.";
		String longestPal = s.substring(0,1); //Any letter can be a palindrome alone, choosing first for simplicity
		for(int i = 0;i<len-1;i++)
		{
			String evenPivot,oddPivot;
			evenPivot = expand(longestPal,i,i); //If the palindrome pivots on a letter
			oddPivot = expand(longestPal,i,i+1); //If the palindrome pivots between two letters
			if (evenPivot.length() > longestPal.length())
			{
				longestPal = evenPivot;
			}
			if (oddPivot.length() > longestPal.length())
			{
				longestPal = oddPivot;
			}
		}
		return longestPal;
	}
}

